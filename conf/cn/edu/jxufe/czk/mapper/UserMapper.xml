<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.jxufe.czk.mapper.UserMapper">
	<!-- 配置使用二级缓存
	eviction: 缓存的回收策略. 默认的回收策略是LRU
		LRU – 最近最少使用的：移除最长时间不被使用的对象。
		FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
		SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
		WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
	flushInterval:缓存的刷新间隔
		缓存多长时间清空一次. 默认是不清空.
		设置一个毫秒值	
	readOnly: 设置缓存是否只读
		true: 只读.  mybatis认为所有从缓存中获取数据的操作都是只读操作.不会修改数据.
					mybatis为了提升获取速度,直接将数据在缓存中的引用交给用户.
					效率快，不安全.
		false:非只读. mybatis认为获取的数据可能会被修改. mybatis会利用序列化以及反序列化的技术
					克隆一份新的数据交给用户
	size:标识缓存能存放多少元素
	type: 用来指定具体的缓存实现类.				
	
	<cache eviction="LRU" flushInterval="60000" readOnly="false" size="1024" ></cache>
	 -->
	 
	 <!-- 配置使用Ehcache
	 	<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
	  -->

	<!-- List<User> selectAllUser(); -->
	<select id="selectAllUser" resultType="cn.edu.jxufe.czk.entity.User">
		select * from User ;
	</select>
	
	<!-- List<Map<String,Object>> selectAllUserMap(); -->
	<select id="selectAllUserMap" resultType="hashmap">
		select * from User ;
	</select>
	

	<!-- User selectUserById(String id); -->
	<select id="selectUserById" resultType="cn.edu.jxufe.czk.entity.User">
		select * from User where id = #{id};
	</select>
	
	
	<!-- HashMap selectUserByIdMap(String id); -->
	<select id="selectUserByIdMap" resultType="hashmap">
		select * from User where id = #{id};
	</select>
	
	<insert id="insertMutiUser">
		insert into User(username,passwd,sex,nickName,mail)
		<foreach collection="users" separator="," item="user" open="values" close=";">
		(#{user.userName},#{user.passwd},#{user.sex},#{user.nickName},#{user.mail})
		</foreach>
		
	</insert>
	
</mapper>